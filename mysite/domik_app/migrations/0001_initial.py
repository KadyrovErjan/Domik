# Generated by Django 5.2.4 on 2025-07-28 16:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=64)),
                ('category_name_en', models.CharField(max_length=64, null=True)),
                ('category_name_ru', models.CharField(max_length=64, null=True)),
                ('image', models.ImageField(upload_to='category_image/')),
            ],
        ),
        migrations.CreateModel(
            name='Domik',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=180)),
                ('title_en', models.CharField(max_length=180, null=True)),
                ('title_ru', models.CharField(max_length=180, null=True)),
                ('description', models.TextField()),
                ('description_en', models.TextField(null=True)),
                ('description_ru', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(upload_to='user_avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64)),
                ('title_en', models.CharField(max_length=64, null=True)),
                ('title_ru', models.CharField(max_length=64, null=True)),
                ('bathroom', models.PositiveSmallIntegerField(default=0)),
                ('bathrooms_place', models.PositiveSmallIntegerField(default=0)),
                ('entry', models.PositiveSmallIntegerField()),
                ('departure', models.PositiveSmallIntegerField()),
                ('table_tennis', models.BooleanField(default=False)),
                ('bath_house', models.BooleanField(default=False)),
                ('swimming_pool', models.BooleanField(default=False)),
                ('sauna', models.BooleanField(default=False)),
                ('air_hockey', models.BooleanField(default=False)),
                ('bathhouse_without_brooms', models.BooleanField(default=False)),
                ('billiards', models.BooleanField(default=False)),
                ('video', models.URLField()),
                ('check_in_time', models.TimeField()),
                ('departure_time', models.TimeField()),
                ('type_of_housing', models.CharField(max_length=64)),
                ('type_of_housing_en', models.CharField(max_length=64, null=True)),
                ('type_of_housing_ru', models.CharField(max_length=64, null=True)),
                ('address', models.CharField(max_length=200)),
                ('address_en', models.CharField(max_length=200, null=True)),
                ('address_ru', models.CharField(max_length=200, null=True)),
                ('floor', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], default=1, max_length=1)),
                ('area', models.PositiveSmallIntegerField()),
                ('plot', models.PositiveSmallIntegerField()),
                ('count_people', models.PositiveSmallIntegerField(default=1)),
                ('weekdays_title', models.CharField(max_length=24)),
                ('weekdays_title_en', models.CharField(max_length=24, null=True)),
                ('weekdays_title_ru', models.CharField(max_length=24, null=True)),
                ('weekdays_price', models.PositiveIntegerField()),
                ('saturday_title', models.CharField(max_length=24)),
                ('saturday_title_en', models.CharField(max_length=24, null=True)),
                ('saturday_title_ru', models.CharField(max_length=24, null=True)),
                ('saturday_price', models.PositiveIntegerField()),
                ('friday_title', models.CharField(max_length=24)),
                ('friday_title_en', models.CharField(max_length=24, null=True)),
                ('friday_title_ru', models.CharField(max_length=24, null=True)),
                ('friday_price', models.PositiveIntegerField()),
                ('sunday_title', models.CharField(max_length=24)),
                ('sunday_title_en', models.CharField(max_length=24, null=True)),
                ('sunday_title_ru', models.CharField(max_length=24, null=True)),
                ('sunday_price', models.PositiveIntegerField()),
                ('pledge_title', models.CharField(max_length=24)),
                ('pledge_title_en', models.CharField(max_length=24, null=True)),
                ('pledge_title_ru', models.CharField(max_length=24, null=True)),
                ('pledge_price', models.PositiveIntegerField()),
                ('weekends_title', models.CharField(max_length=200)),
                ('weekends_title_en', models.CharField(max_length=200, null=True)),
                ('weekends_title_ru', models.CharField(max_length=200, null=True)),
                ('weekends_price', models.PositiveIntegerField()),
                ('new_year_title', models.CharField(max_length=200)),
                ('new_year_title_en', models.CharField(max_length=200, null=True)),
                ('new_year_title_ru', models.CharField(max_length=200, null=True)),
                ('new_year_price', models.PositiveIntegerField()),
                ('party_title', models.CharField(max_length=200)),
                ('party_title_en', models.CharField(max_length=200, null=True)),
                ('party_title_ru', models.CharField(max_length=200, null=True)),
                ('party_price', models.PositiveIntegerField()),
                ('description', models.TextField()),
                ('description_en', models.TextField(null=True)),
                ('description_ru', models.TextField(null=True)),
                ('additional_fees', models.TextField()),
                ('additional_fees_en', models.TextField(null=True)),
                ('additional_fees_ru', models.TextField(null=True)),
                ('important_information', models.TextField()),
                ('important_information_en', models.TextField(null=True)),
                ('important_information_ru', models.TextField(null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domik_app.category')),
            ],
        ),
        migrations.CreateModel(
            name='HouseImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='house_image/')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='house_images', to='domik_app.house')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_score', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='house_review', to='domik_app.house')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteHouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('favorite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domik_app.favorite')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_houses', to='domik_app.house')),
            ],
            options={
                'unique_together': {('house', 'favorite')},
            },
        ),
    ]
